name: Docker CI Test

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'Dockerfile'
      - 'requirements.txt'
      - 'test/**'
      - '.github/workflows/docker-ci-test.yml'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # For manual execution

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Free up disk space
        run: |
          echo "Disk space before cleanup:"
          df -h
          
          echo "Removing unnecessary large packages..."
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          
          echo "Disk space after cleanup:"
          df -h

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create requirements-ci.txt
        run: |
          cat > requirements-ci.txt << 'EOFILE'
          numpy
          pandas<2.1.0
          matplotlib
          scikit-learn<1.3.0
          polars<0.19.0
          jupyter-core
          pytest
          EOFILE
          echo "Created CI-specific requirements file"

      - name: Create test directory
        run: mkdir -p test

      - name: Create basic import test script
        run: |
          cat > test/basic_import_test.py << 'EOFILE'
          #!/usr/bin/env python3
          import sys
          import importlib

          # Basic import test
          required_packages = ['numpy', 'pandas', 'matplotlib', 'sklearn', 'polars']
          
          for package in required_packages:
              try:
                  module = importlib.import_module(package)
                  if hasattr(module, '__version__'):
                      print(f"✓ {package} ({module.__version__})")
                  else:
                      print(f"✓ {package}")
              except ImportError as e:
                  print(f"× {package}: {str(e)}")
                  sys.exit(1)
                  
          print("All packages imported successfully!")
          EOFILE
          chmod +x test/basic_import_test.py
          echo "Created basic import test script"

      - name: Create CI Dockerfile
        run: |
          cat > Dockerfile.ci << 'EOFILE'
          FROM python:3.11-slim
          
          WORKDIR /app
          
          # Install minimal system packages
          RUN apt-get update && apt-get install -y --no-install-recommends \
              build-essential \
              python3-dev \
              && apt-get clean \
              && rm -rf /var/lib/apt/lists/*
          
          # Copy CI-specific requirements file
          COPY requirements-ci.txt .
          
          # Install packages and clean cache
          RUN pip install --no-cache-dir --upgrade pip && \
              pip install --no-cache-dir -r requirements-ci.txt && \
              pip cache purge
          
          # Copy test directory
          COPY test/ /app/test/
          
          # Default test command
          CMD ["python", "test/basic_import_test.py"]
          EOFILE
          echo "Created CI-specific Dockerfile"

      # Build using direct Docker command
      - name: Build Docker image directly
        id: direct-build
        run: |
          echo "Building Docker image using direct command..."
          docker build -t polars-data-analysis:ci-test -f Dockerfile.ci .
          echo "image_built=true" >> $GITHUB_OUTPUT

      # Verify that the image exists
      - name: Verify Docker image
        id: verify-image
        run: |
          echo "Verifying docker image exists..."
          if docker image inspect polars-data-analysis:ci-test > /dev/null 2>&1; then
            echo "Image exists!"
            echo "image_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Image does not exist!"
            echo "image_exists=false" >> $GITHUB_OUTPUT
          fi

      # Run basic tests
      - name: Run Basic Import Test
        id: basic-test
        if: steps.verify-image.outputs.image_exists == 'true'
        run: |
          echo "Running basic import test..."
          docker run --rm polars-data-analysis:ci-test
          echo "test_run=true" >> $GITHUB_OUTPUT

      # Check package versions
      - name: Print package versions
        id: check-versions
        if: steps.verify-image.outputs.image_exists == 'true'
        run: |
          echo "Checking installed package versions..."
          docker run --rm polars-data-analysis:ci-test pip freeze > package_versions.txt
          cat package_versions.txt
          echo "versions_checked=true" >> $GITHUB_OUTPUT

      # Generate test report
      - name: Generate test report
        if: always() && steps.verify-image.outputs.image_exists == 'true'
        run: |
          echo "# CI Test Results" > test_report.md
          echo "Run Date: $(date)" >> test_report.md
          echo "Commit: ${{ github.sha }}" >> test_report.md
          echo "" >> test_report.md
          
          echo "## Installed Packages" >> test_report.md
          if [ -f "package_versions.txt" ]; then
            cat package_versions.txt >> test_report.md
          else
            echo "Package versions not available" >> test_report.md
          fi
          
          echo "" >> test_report.md
          echo "## Test Result" >> test_report.md
          if [ "${{ steps.basic-test.outputs.test_run }}" == "true" ]; then
            echo "✅ Basic import test completed" >> test_report.md
          else
            echo "❌ Basic import test did not run" >> test_report.md
          fi

      # Create fallback report if build failed
      - name: Create fallback report
        if: always() && steps.verify-image.outputs.image_exists != 'true'
        run: |
          echo "# CI Test Results - Failed Build" > test_report.md
          echo "Run Date: $(date)" >> test_report.md
          echo "Commit: ${{ github.sha }}" >> test_report.md
          echo "" >> test_report.md
          echo "## Error" >> test_report.md
          echo "Docker image build failed or image not accessible." >> test_report.md
          echo "" >> test_report.md
          echo "### Docker images available:" >> test_report.md
          docker images >> test_report.md

      # Upload test report as an artifact
      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: test_report.md
          